/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AjnaLenderHelperInterface extends utils.Interface {
  functions: {
    'addQuoteToken(address,uint256,uint256,uint256)': FunctionFragment;
    'moveQuoteToken(address,uint256,uint256,uint256,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'addQuoteToken' | 'moveQuoteToken'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addQuoteToken',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'moveQuoteToken',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'addQuoteToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveQuoteToken', data: BytesLike): Result;

  events: {};
}

export interface AjnaLenderHelper extends BaseContract {
  contractName: 'AjnaLenderHelper';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaLenderHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    moveQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addQuoteToken(
    pool_: string,
    maxAmount_: BigNumberish,
    index_: BigNumberish,
    expiry_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  moveQuoteToken(
    pool_: string,
    maxAmount_: BigNumberish,
    fromIndex_: BigNumberish,
    toIndex_: BigNumberish,
    expiry_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bucketLP_: BigNumber; addedAmount_: BigNumber }>;

    moveQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fromBucketRedeemedLP_: BigNumber;
        toBucketAwardedLP_: BigNumber;
        movedAmount_: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    moveQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    moveQuoteToken(
      pool_: string,
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
