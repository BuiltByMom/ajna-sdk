/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface RewardsManagerInterface extends utils.Interface {
  functions: {
    'ajnaToken()': FunctionFragment;
    'calculateRewards(uint256,uint256)': FunctionFragment;
    'claimRewards(uint256,uint256)': FunctionFragment;
    'getBucketStateStakeInfo(uint256,uint256)': FunctionFragment;
    'getStakeInfo(uint256)': FunctionFragment;
    'isEpochClaimed(uint256,uint256)': FunctionFragment;
    'moveStakedLiquidity(uint256,uint256[],uint256[],uint256)': FunctionFragment;
    'positionManager()': FunctionFragment;
    'rewardsClaimed(uint256)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'unstake(uint256)': FunctionFragment;
    'updateBucketExchangeRatesAndClaim(address,uint256[])': FunctionFragment;
    'updateRewardsClaimed(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ajnaToken'
      | 'calculateRewards'
      | 'claimRewards'
      | 'getBucketStateStakeInfo'
      | 'getStakeInfo'
      | 'isEpochClaimed'
      | 'moveStakedLiquidity'
      | 'positionManager'
      | 'rewardsClaimed'
      | 'stake'
      | 'unstake'
      | 'updateBucketExchangeRatesAndClaim'
      | 'updateRewardsClaimed'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ajnaToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBucketStateStakeInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getStakeInfo',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isEpochClaimed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'moveStakedLiquidity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'positionManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rewardsClaimed',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'unstake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateBucketExchangeRatesAndClaim',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRewardsClaimed',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'ajnaToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBucketStateStakeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEpochClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveStakedLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateBucketExchangeRatesAndClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'updateRewardsClaimed', data: BytesLike): Result;

  events: {
    'ClaimRewards(address,address,uint256,uint256[],uint256)': EventFragment;
    'MoveStakedLiquidity(uint256,uint256[],uint256[])': EventFragment;
    'Stake(address,address,uint256)': EventFragment;
    'Unstake(address,address,uint256)': EventFragment;
    'UpdateExchangeRates(address,address,uint256[],uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MoveStakedLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateExchangeRates'): EventFragment;
}

export interface ClaimRewardsEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
  epochsClaimed: BigNumber[];
  amount: BigNumber;
}
export type ClaimRewardsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber],
  ClaimRewardsEventObject
>;

export type ClaimRewardsEventFilter = TypedEventFilter<ClaimRewardsEvent>;

export interface MoveStakedLiquidityEventObject {
  tokenId: BigNumber;
  fromIndexes: BigNumber[];
  toIndexes: BigNumber[];
}
export type MoveStakedLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  MoveStakedLiquidityEventObject
>;

export type MoveStakedLiquidityEventFilter = TypedEventFilter<MoveStakedLiquidityEvent>;

export interface StakeEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
}
export type StakeEvent = TypedEvent<[string, string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface UpdateExchangeRatesEventObject {
  caller: string;
  ajnaPool: string;
  indexesUpdated: BigNumber[];
  rewardsClaimed: BigNumber;
}
export type UpdateExchangeRatesEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber],
  UpdateExchangeRatesEventObject
>;

export type UpdateExchangeRatesEventFilter = TypedEventFilter<UpdateExchangeRatesEvent>;

export interface RewardsManager extends BaseContract {
  contractName: 'RewardsManager';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ajnaToken(overrides?: CallOverrides): Promise<[string]>;

    calculateRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards_: BigNumber }>;

    claimRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    isEpochClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    moveStakedLiquidity(
      tokenId_: PromiseOrValue<BigNumberish>,
      fromBuckets_: PromiseOrValue<BigNumberish>[],
      toBuckets_: PromiseOrValue<BigNumberish>[],
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    rewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBucketExchangeRatesAndClaim(
      pool_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  ajnaToken(overrides?: CallOverrides): Promise<string>;

  calculateRewards(
    tokenId_: PromiseOrValue<BigNumberish>,
    epochToClaim_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    tokenId_: PromiseOrValue<BigNumberish>,
    epochToClaim_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBucketStateStakeInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    bucketId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getStakeInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  isEpochClaimed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  moveStakedLiquidity(
    tokenId_: PromiseOrValue<BigNumberish>,
    fromBuckets_: PromiseOrValue<BigNumberish>[],
    toBuckets_: PromiseOrValue<BigNumberish>[],
    expiry_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  rewardsClaimed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBucketExchangeRatesAndClaim(
    pool_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardsClaimed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ajnaToken(overrides?: CallOverrides): Promise<string>;

    calculateRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    isEpochClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    moveStakedLiquidity(
      tokenId_: PromiseOrValue<BigNumberish>,
      fromBuckets_: PromiseOrValue<BigNumberish>[],
      toBuckets_: PromiseOrValue<BigNumberish>[],
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    rewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    unstake(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateBucketExchangeRatesAndClaim(
      pool_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'ClaimRewards(address,address,uint256,uint256[],uint256)'(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      epochsClaimed?: null,
      amount?: null
    ): ClaimRewardsEventFilter;
    ClaimRewards(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      epochsClaimed?: null,
      amount?: null
    ): ClaimRewardsEventFilter;

    'MoveStakedLiquidity(uint256,uint256[],uint256[])'(
      tokenId?: null,
      fromIndexes?: null,
      toIndexes?: null
    ): MoveStakedLiquidityEventFilter;
    MoveStakedLiquidity(
      tokenId?: null,
      fromIndexes?: null,
      toIndexes?: null
    ): MoveStakedLiquidityEventFilter;

    'Stake(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;
    Stake(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;

    'Unstake(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeEventFilter;
    Unstake(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeEventFilter;

    'UpdateExchangeRates(address,address,uint256[],uint256)'(
      caller?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      indexesUpdated?: null,
      rewardsClaimed?: null
    ): UpdateExchangeRatesEventFilter;
    UpdateExchangeRates(
      caller?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      indexesUpdated?: null,
      rewardsClaimed?: null
    ): UpdateExchangeRatesEventFilter;
  };

  estimateGas: {
    ajnaToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEpochClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveStakedLiquidity(
      tokenId_: PromiseOrValue<BigNumberish>,
      fromBuckets_: PromiseOrValue<BigNumberish>[],
      toBuckets_: PromiseOrValue<BigNumberish>[],
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBucketExchangeRatesAndClaim(
      pool_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ajnaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      tokenId_: PromiseOrValue<BigNumberish>,
      epochToClaim_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEpochClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveStakedLiquidity(
      tokenId_: PromiseOrValue<BigNumberish>,
      fromBuckets_: PromiseOrValue<BigNumberish>[],
      toBuckets_: PromiseOrValue<BigNumberish>[],
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBucketExchangeRatesAndClaim(
      pool_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardsClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
