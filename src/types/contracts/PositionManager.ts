/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PositionManagerInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getLP(uint256,uint256)': FunctionFragment;
    'getPositionIndexes(uint256)': FunctionFragment;
    'getPositionIndexesFiltered(uint256)': FunctionFragment;
    'getPositionInfo(uint256,uint256)': FunctionFragment;
    'isAjnaPool(address,bytes32)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isIndexInPosition(uint256,uint256)': FunctionFragment;
    'isPositionBucketBankrupt(uint256,uint256)': FunctionFragment;
    'memorializePositions(address,uint256,uint256[])': FunctionFragment;
    'mint(address,address,bytes32)': FunctionFragment;
    'moveLiquidity(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(uint256)': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'permit(address,uint256,uint256,bytes)': FunctionFragment;
    'poolKey(uint256)': FunctionFragment;
    'redeemPositions(address,uint256,uint256[])': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'getApproved'
      | 'getLP'
      | 'getPositionIndexes'
      | 'getPositionIndexesFiltered'
      | 'getPositionInfo'
      | 'isAjnaPool'
      | 'isApprovedForAll'
      | 'isIndexInPosition'
      | 'isPositionBucketBankrupt'
      | 'memorializePositions'
      | 'mint'
      | 'moveLiquidity'
      | 'multicall'
      | 'name'
      | 'nonces'
      | 'ownerOf'
      | 'permit'
      | 'poolKey'
      | 'redeemPositions'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'transferFrom'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLP', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPositionIndexes', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getPositionIndexesFiltered',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionInfo',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isAjnaPool', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'isIndexInPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isPositionBucketBankrupt',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'memorializePositions',
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, string, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'moveLiquidity',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'poolKey', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'redeemPositions',
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionIndexes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionIndexesFiltered', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAjnaPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isIndexInPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPositionBucketBankrupt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'memorializePositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemPositions', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'Burn(address,uint256)': EventFragment;
    'MemorializePosition(address,uint256,uint256[])': EventFragment;
    'Mint(address,address,uint256)': EventFragment;
    'MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'RedeemPosition(address,uint256,uint256[])': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MemorializePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MoveLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BurnEventObject {
  lender: string;
  tokenId: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MemorializePositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type MemorializePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  MemorializePositionEventObject
>;

export type MemorializePositionEventFilter = TypedEventFilter<MemorializePositionEvent>;

export interface MintEventObject {
  lender: string;
  pool: string;
  tokenId: BigNumber;
}
export type MintEvent = TypedEvent<[string, string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MoveLiquidityEventObject {
  lender: string;
  tokenId: BigNumber;
  fromIndex: BigNumber;
  toIndex: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
}
export type MoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveLiquidityEventObject
>;

export type MoveLiquidityEventFilter = TypedEventFilter<MoveLiquidityEvent>;

export interface RedeemPositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type RedeemPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  RedeemPositionEventObject
>;

export type RedeemPositionEventFilter = TypedEventFilter<RedeemPositionEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PositionManager extends BaseContract {
  contractName: 'PositionManager';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      pool_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getLP(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionIndexes(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPositionIndexesFiltered(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { filteredIndexes_: BigNumber[] }>;

    getPositionInfo(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(
      pool_: string,
      subsetHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIndexInPosition(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPositionBucketBankrupt(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memorializePositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      pool_: string,
      recipient_: string,
      poolSubsetHash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    moveLiquidity(
      pool_: string,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    permit(
      spender_: string,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    poolKey(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    redeemPositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    pool_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getLP(
    tokenId_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionIndexes(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  getPositionIndexesFiltered(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositionInfo(
    tokenId_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isAjnaPool(pool_: string, subsetHash_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isIndexInPosition(
    tokenId_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPositionBucketBankrupt(
    tokenId_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memorializePositions(
    pool_: string,
    tokenId_: BigNumberish,
    indexes_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    pool_: string,
    recipient_: string,
    poolSubsetHash_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  moveLiquidity(
    pool_: string,
    tokenId_: BigNumberish,
    fromIndex_: BigNumberish,
    toIndex_: BigNumberish,
    expiry_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  permit(
    spender_: string,
    tokenId_: BigNumberish,
    deadline_: BigNumberish,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  poolKey(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  redeemPositions(
    pool_: string,
    tokenId_: BigNumberish,
    indexes_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(pool_: string, tokenId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getLP(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    getPositionIndexesFiltered(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositionInfo(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(pool_: string, subsetHash_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isIndexInPosition(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPositionBucketBankrupt(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memorializePositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      pool_: string,
      recipient_: string,
      poolSubsetHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: string,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    permit(
      spender_: string,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    poolKey(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

    redeemPositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    'Burn(address,uint256)'(lender?: string | null, tokenId?: BigNumberish | null): BurnEventFilter;
    Burn(lender?: string | null, tokenId?: BigNumberish | null): BurnEventFilter;

    'MemorializePosition(address,uint256,uint256[])'(
      lender?: string | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;
    MemorializePosition(
      lender?: string | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;

    'Mint(address,address,uint256)'(
      lender?: string | null,
      pool?: string | null,
      tokenId?: null
    ): MintEventFilter;
    Mint(lender?: string | null, pool?: string | null, tokenId?: null): MintEventFilter;

    'MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)'(
      lender?: string | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;
    MoveLiquidity(
      lender?: string | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;

    'RedeemPosition(address,uint256,uint256[])'(
      lender?: string | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;
    RedeemPosition(
      lender?: string | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      pool_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLP(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionIndexesFiltered(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAjnaPool(
      pool_: string,
      subsetHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexInPosition(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPositionBucketBankrupt(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memorializePositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      pool_: string,
      recipient_: string,
      poolSubsetHash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: string,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      spender_: string,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    poolKey(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeemPositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      pool_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLP(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexes(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexesFiltered(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAjnaPool(
      pool_: string,
      subsetHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIndexInPosition(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionBucketBankrupt(
      tokenId_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memorializePositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      pool_: string,
      recipient_: string,
      poolSubsetHash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    moveLiquidity(
      pool_: string,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      spender_: string,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    poolKey(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemPositions(
      pool_: string,
      tokenId_: BigNumberish,
      indexes_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
