/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ERC20PoolFactoryInterface extends utils.Interface {
  functions: {
    'ERC20_NON_SUBSET_HASH()': FunctionFragment;
    'MAX_RATE()': FunctionFragment;
    'MIN_RATE()': FunctionFragment;
    'ajna()': FunctionFragment;
    'deployPool(address,address,uint256)': FunctionFragment;
    'deployedPools(bytes32,address,address)': FunctionFragment;
    'deployedPoolsList(uint256)': FunctionFragment;
    'getDeployedPoolsList()': FunctionFragment;
    'getNumberOfDeployedPools()': FunctionFragment;
    'implementation()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ERC20_NON_SUBSET_HASH'
      | 'MAX_RATE'
      | 'MIN_RATE'
      | 'ajna'
      | 'deployPool'
      | 'deployedPools'
      | 'deployedPoolsList'
      | 'getDeployedPoolsList'
      | 'getNumberOfDeployedPools'
      | 'implementation'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ERC20_NON_SUBSET_HASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ajna', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deployPool',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deployedPools',
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'deployedPoolsList', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getDeployedPoolsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNumberOfDeployedPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ERC20_NON_SUBSET_HASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ajna', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployedPoolsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDeployedPoolsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumberOfDeployedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;

  events: {
    'PoolCreated(address,bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
}

export interface PoolCreatedEventObject {
  pool_: string;
  subsetHash_: string;
}
export type PoolCreatedEvent = TypedEvent<[string, string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface ERC20PoolFactory extends BaseContract {
  contractName: 'ERC20PoolFactory';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20PoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC20_NON_SUBSET_HASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ajna(overrides?: CallOverrides): Promise<[string]>;

    deployPool(
      collateral_: string,
      quote_: string,
      interestRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployedPools(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployedPoolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<[string[]]>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;
  };

  ERC20_NON_SUBSET_HASH(overrides?: CallOverrides): Promise<string>;

  MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  ajna(overrides?: CallOverrides): Promise<string>;

  deployPool(
    collateral_: string,
    quote_: string,
    interestRate_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployedPools(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<string>;

  deployedPoolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getDeployedPoolsList(overrides?: CallOverrides): Promise<string[]>;

  getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ERC20_NON_SUBSET_HASH(overrides?: CallOverrides): Promise<string>;

    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    ajna(overrides?: CallOverrides): Promise<string>;

    deployPool(
      collateral_: string,
      quote_: string,
      interestRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedPools(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedPoolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<string[]>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'PoolCreated(address,bytes32)'(pool_?: null, subsetHash_?: null): PoolCreatedEventFilter;
    PoolCreated(pool_?: null, subsetHash_?: null): PoolCreatedEventFilter;
  };

  estimateGas: {
    ERC20_NON_SUBSET_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    ajna(overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      collateral_: string,
      quote_: string,
      interestRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployedPools(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployedPoolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC20_NON_SUBSET_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajna(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPool(
      collateral_: string,
      quote_: string,
      interestRate_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployedPools(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployedPoolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
