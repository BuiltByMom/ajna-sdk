/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PoolInfoUtilsInterface extends utils.Interface {
  functions: {
    'auctionInfo(address,address)': FunctionFragment;
    'auctionStatus(address,address)': FunctionFragment;
    'availableQuoteTokenAmount(address)': FunctionFragment;
    'borrowFeeRate(address)': FunctionFragment;
    'borrowerInfo(address,address)': FunctionFragment;
    'bucketInfo(address,uint256)': FunctionFragment;
    'depositFeeRate(address)': FunctionFragment;
    'hpb(address)': FunctionFragment;
    'hpbIndex(address)': FunctionFragment;
    'htp(address)': FunctionFragment;
    'indexToPrice(uint256)': FunctionFragment;
    'lenderInterestMargin(address)': FunctionFragment;
    'lpToCollateral(address,uint256,uint256)': FunctionFragment;
    'lpToQuoteTokens(address,uint256,uint256)': FunctionFragment;
    'lup(address)': FunctionFragment;
    'lupIndex(address)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'poolLoansInfo(address)': FunctionFragment;
    'poolPricesInfo(address)': FunctionFragment;
    'poolReservesInfo(address)': FunctionFragment;
    'poolUtilizationInfo(address)': FunctionFragment;
    'priceToIndex(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'auctionInfo'
      | 'auctionStatus'
      | 'availableQuoteTokenAmount'
      | 'borrowFeeRate'
      | 'borrowerInfo'
      | 'bucketInfo'
      | 'depositFeeRate'
      | 'hpb'
      | 'hpbIndex'
      | 'htp'
      | 'indexToPrice'
      | 'lenderInterestMargin'
      | 'lpToCollateral'
      | 'lpToQuoteTokens'
      | 'lup'
      | 'lupIndex'
      | 'multicall'
      | 'poolLoansInfo'
      | 'poolPricesInfo'
      | 'poolReservesInfo'
      | 'poolUtilizationInfo'
      | 'priceToIndex'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'auctionInfo', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'auctionStatus', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'availableQuoteTokenAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowFeeRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowerInfo', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'bucketInfo', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositFeeRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'hpb', values: [string]): string;
  encodeFunctionData(functionFragment: 'hpbIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'htp', values: [string]): string;
  encodeFunctionData(functionFragment: 'indexToPrice', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lenderInterestMargin', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'lpToCollateral',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'lpToQuoteTokens',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'lup', values: [string]): string;
  encodeFunctionData(functionFragment: 'lupIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'poolLoansInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolPricesInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolReservesInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolUtilizationInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'priceToIndex', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'auctionInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'auctionStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableQuoteTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bucketInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hpb', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hpbIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'htp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'indexToPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lenderInterestMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpToCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpToQuoteTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lupIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLoansInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolPricesInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolReservesInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolUtilizationInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceToIndex', data: BytesLike): Result;

  events: {};
}

export interface PoolInfoUtils extends BaseContract {
  contractName: 'PoolInfoUtils';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInfoUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        kicker_: string;
        bondFactor_: BigNumber;
        bondSize_: BigNumber;
        kickTime_: BigNumber;
        referencePrice_: BigNumber;
        neutralPrice_: BigNumber;
        debtToCollateral_: BigNumber;
        head_: string;
        next_: string;
        prev_: string;
      }
    >;

    auctionStatus(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        kickTime_: BigNumber;
        collateral_: BigNumber;
        debtToCover_: BigNumber;
        isCollateralized_: boolean;
        price_: BigNumber;
        neutralPrice_: BigNumber;
        referencePrice_: BigNumber;
        debtToCollateral_: BigNumber;
        bondFactor_: BigNumber;
      }
    >;

    availableQuoteTokenAmount(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    borrowFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt_: BigNumber;
        collateral_: BigNumber;
        t0Np_: BigNumber;
        thresholdPrice_: BigNumber;
      }
    >;

    bucketInfo(
      ajnaPool_: string,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price_: BigNumber;
        quoteTokens_: BigNumber;
        collateral_: BigNumber;
        bucketLP_: BigNumber;
        scale_: BigNumber;
        exchangeRate_: BigNumber;
      }
    >;

    depositFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hpb(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hpbIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    htp(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber] & { htp_: BigNumber }>;

    indexToPrice(index_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    lenderInterestMargin(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lenderInterestMargin_: BigNumber }>;

    lpToCollateral(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralAmount_: BigNumber }>;

    lpToQuoteTokens(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount_: BigNumber }>;

    lup(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lupIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    poolLoansInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        poolSize_: BigNumber;
        loansCount_: BigNumber;
        maxBorrower_: string;
        pendingInflator_: BigNumber;
        pendingInterestFactor_: BigNumber;
      }
    >;

    poolPricesInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hpb_: BigNumber;
        hpbIndex_: BigNumber;
        htp_: BigNumber;
        htpIndex_: BigNumber;
        lup_: BigNumber;
        lupIndex_: BigNumber;
      }
    >;

    poolReservesInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserves_: BigNumber;
        claimableReserves_: BigNumber;
        claimableReservesRemaining_: BigNumber;
        auctionPrice_: BigNumber;
        timeRemaining_: BigNumber;
      }
    >;

    poolUtilizationInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        poolMinDebtAmount_: BigNumber;
        poolCollateralization_: BigNumber;
        poolActualUtilization_: BigNumber;
        poolTargetUtilization_: BigNumber;
      }
    >;

    priceToIndex(price_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  auctionInfo(
    ajnaPool_: string,
    borrower_: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      kicker_: string;
      bondFactor_: BigNumber;
      bondSize_: BigNumber;
      kickTime_: BigNumber;
      referencePrice_: BigNumber;
      neutralPrice_: BigNumber;
      debtToCollateral_: BigNumber;
      head_: string;
      next_: string;
      prev_: string;
    }
  >;

  auctionStatus(
    ajnaPool_: string,
    borrower_: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      kickTime_: BigNumber;
      collateral_: BigNumber;
      debtToCover_: BigNumber;
      isCollateralized_: boolean;
      price_: BigNumber;
      neutralPrice_: BigNumber;
      referencePrice_: BigNumber;
      debtToCollateral_: BigNumber;
      bondFactor_: BigNumber;
    }
  >;

  availableQuoteTokenAmount(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowerInfo(
    ajnaPool_: string,
    borrower_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt_: BigNumber;
      collateral_: BigNumber;
      t0Np_: BigNumber;
      thresholdPrice_: BigNumber;
    }
  >;

  bucketInfo(
    ajnaPool_: string,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      price_: BigNumber;
      quoteTokens_: BigNumber;
      collateral_: BigNumber;
      bucketLP_: BigNumber;
      scale_: BigNumber;
      exchangeRate_: BigNumber;
    }
  >;

  depositFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  hpb(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  hpbIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  htp(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  indexToPrice(index_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  lenderInterestMargin(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  lpToCollateral(
    ajnaPool_: string,
    lp_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpToQuoteTokens(
    ajnaPool_: string,
    lp_: BigNumberish,
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lup(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  lupIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  poolLoansInfo(
    ajnaPool_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      poolSize_: BigNumber;
      loansCount_: BigNumber;
      maxBorrower_: string;
      pendingInflator_: BigNumber;
      pendingInterestFactor_: BigNumber;
    }
  >;

  poolPricesInfo(
    ajnaPool_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      hpb_: BigNumber;
      hpbIndex_: BigNumber;
      htp_: BigNumber;
      htpIndex_: BigNumber;
      lup_: BigNumber;
      lupIndex_: BigNumber;
    }
  >;

  poolReservesInfo(
    ajnaPool_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      reserves_: BigNumber;
      claimableReserves_: BigNumber;
      claimableReservesRemaining_: BigNumber;
      auctionPrice_: BigNumber;
      timeRemaining_: BigNumber;
    }
  >;

  poolUtilizationInfo(
    ajnaPool_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      poolMinDebtAmount_: BigNumber;
      poolCollateralization_: BigNumber;
      poolActualUtilization_: BigNumber;
      poolTargetUtilization_: BigNumber;
    }
  >;

  priceToIndex(price_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    auctionInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        kicker_: string;
        bondFactor_: BigNumber;
        bondSize_: BigNumber;
        kickTime_: BigNumber;
        referencePrice_: BigNumber;
        neutralPrice_: BigNumber;
        debtToCollateral_: BigNumber;
        head_: string;
        next_: string;
        prev_: string;
      }
    >;

    auctionStatus(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        kickTime_: BigNumber;
        collateral_: BigNumber;
        debtToCover_: BigNumber;
        isCollateralized_: boolean;
        price_: BigNumber;
        neutralPrice_: BigNumber;
        referencePrice_: BigNumber;
        debtToCollateral_: BigNumber;
        bondFactor_: BigNumber;
      }
    >;

    availableQuoteTokenAmount(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt_: BigNumber;
        collateral_: BigNumber;
        t0Np_: BigNumber;
        thresholdPrice_: BigNumber;
      }
    >;

    bucketInfo(
      ajnaPool_: string,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price_: BigNumber;
        quoteTokens_: BigNumber;
        collateral_: BigNumber;
        bucketLP_: BigNumber;
        scale_: BigNumber;
        exchangeRate_: BigNumber;
      }
    >;

    depositFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    hpb(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    hpbIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    htp(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexToPrice(index_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lenderInterestMargin(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpToCollateral(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToQuoteTokens(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lup(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    lupIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    poolLoansInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        poolSize_: BigNumber;
        loansCount_: BigNumber;
        maxBorrower_: string;
        pendingInflator_: BigNumber;
        pendingInterestFactor_: BigNumber;
      }
    >;

    poolPricesInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hpb_: BigNumber;
        hpbIndex_: BigNumber;
        htp_: BigNumber;
        htpIndex_: BigNumber;
        lup_: BigNumber;
        lupIndex_: BigNumber;
      }
    >;

    poolReservesInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserves_: BigNumber;
        claimableReserves_: BigNumber;
        claimableReservesRemaining_: BigNumber;
        auctionPrice_: BigNumber;
        timeRemaining_: BigNumber;
      }
    >;

    poolUtilizationInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        poolMinDebtAmount_: BigNumber;
        poolCollateralization_: BigNumber;
        poolActualUtilization_: BigNumber;
        poolTargetUtilization_: BigNumber;
      }
    >;

    priceToIndex(price_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    auctionInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionStatus(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableQuoteTokenAmount(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketInfo(
      ajnaPool_: string,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    hpb(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    hpbIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    htp(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexToPrice(index_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lenderInterestMargin(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpToCollateral(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToQuoteTokens(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lup(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    lupIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    poolLoansInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolPricesInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolReservesInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolUtilizationInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceToIndex(price_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionStatus(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableQuoteTokenAmount(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerInfo(
      ajnaPool_: string,
      borrower_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketInfo(
      ajnaPool_: string,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFeeRate(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hpb(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hpbIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    htp(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexToPrice(index_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderInterestMargin(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToCollateral(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToQuoteTokens(
      ajnaPool_: string,
      lp_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lup(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lupIndex(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    poolLoansInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolPricesInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolReservesInfo(ajnaPool_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolUtilizationInfo(
      ajnaPool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceToIndex(price_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
