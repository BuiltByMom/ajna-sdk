/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { AjnaLenderHelper, AjnaLenderHelperInterface } from '../AjnaLenderHelper';

const _abi = [
  {
    inputs: [],
    name: 'BucketIndexOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InsufficientLP',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'x',
        type: 'int256',
      },
    ],
    name: 'PRBMathSD59x18__Exp2InputTooBig',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'x',
        type: 'int256',
      },
    ],
    name: 'PRBMathSD59x18__FromIntOverflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'x',
        type: 'int256',
      },
    ],
    name: 'PRBMathSD59x18__FromIntUnderflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'x',
        type: 'int256',
      },
    ],
    name: 'PRBMathSD59x18__LogInputTooSmall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PRBMathSD59x18__MulInputTooSmall',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rAbs',
        type: 'uint256',
      },
    ],
    name: 'PRBMathSD59x18__MulOverflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'prod1',
        type: 'uint256',
      },
    ],
    name: 'PRBMath__MulDivFixedPointOverflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RoundedAmountExceededRequestedMaximum',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'pool_',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'maxAmount_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'index_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'expiry_',
        type: 'uint256',
      },
    ],
    name: 'addQuoteToken',
    outputs: [
      {
        internalType: 'uint256',
        name: 'bucketLP_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'addedAmount_',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'pool_',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'maxAmount_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'fromIndex_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'toIndex_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'expiry_',
        type: 'uint256',
      },
    ],
    name: 'moveQuoteToken',
    outputs: [
      {
        internalType: 'uint256',
        name: 'fromBucketRedeemedLP_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'toBucketAwardedLP_',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'movedAmount_',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class AjnaLenderHelper__factory {
  static readonly abi = _abi;
  static createInterface(): AjnaLenderHelperInterface {
    return new utils.Interface(_abi) as AjnaLenderHelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): AjnaLenderHelper {
    return new Contract(address, _abi, signerOrProvider) as AjnaLenderHelper;
  }
}
